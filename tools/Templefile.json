{"result": [{"type": 1, "url": "http://127.0.0.1:5000/0", "function": "SafeMath.div(uint256,uint256)", "results": [{"blocknumber": "0x0fca70a8c68d71b3fdadddf670002f7cc605a287", "contract": "SafeMath", "function_name": "div(uint256,uint256)", "clones_num": 19, "composition_count": "7", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result0", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n      assert(b > 0);\n      uint256 c = a / b;\n      return c;\n  }\n"], "highlight1": [], "highlight2": [], "graph": [{"key": "start", "color": "lightblue"}, {"key": "c = a / b", "color": "lightblue"}, {"key": "check(b > 0)", "color": "lightblue"}, {"key": "return c", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "check(b > 0)"}, {"from": "check(b > 0)", "to": "c = a / b"}, {"from": "c = a / b", "to": "return c"}], "percentage": []}, {"blocknumber": "0x5f3c307905bacb2924b57117e9d2342271d74722", "contract": "SafeMath", "function_name": "safeDiv(uint256,uint256)", "clones_num": 0, "composition_count": "0", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result1", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function safeDiv(uint256 a, uint256 b) public pure returns (uint256 c) {\n        require(b > 0)5%;\n        c = a / b;\n    }\n"], "highlight1": ["c", "assert(b &gt; 0)"], "highlight2": ["require(b &gt; 0)"], "graph": [{"key": "start", "color": "lightblue"}, {"key": "c = a / b", "color": "lightblue"}, {"key": "check(b > 0)", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "check(b > 0)"}, {"from": "check(b > 0)", "to": "c = a / b"}], "percentage": ["5%"]}, {"blocknumber": "0x2ce4fab9f313f1df0978869c5d302768f1bb471d", "contract": "SafeMath", "function_name": "add(uint256,uint256)", "clones_num": 3, "composition_count": "7", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result2", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b25%;\n\t\tassert(a <= c)5%;\n\t\treturn c;\n\t}\n"], "highlight1": ["c = a / b", "assert(b &gt; 0)"], "highlight2": ["assert(a &lt;= c)", "c = a + b"], "graph": [{"key": "check(a <= c)", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}, {"key": "return c", "color": "lightblue"}, {"key": "c = a + b", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "c = a + b"}, {"from": "c = a + b", "to": "check(a <= c)"}, {"from": "check(a <= c)", "to": "return c"}], "percentage": ["5%", "25%"]}, {"blocknumber": "0x1dcaef208411119ed3d2527d1a2e724f0e3a07cc", "contract": "SafeMath", "function_name": "sadd(uint256,uint256)", "clones_num": 19, "composition_count": "74", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result3", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "\tfunction sadd(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b25%;\n\t\trequire(c >= a)5%;\n\t\treturn c;\n\t}\n"], "highlight1": ["c = a / b", "assert(b &gt; 0)"], "highlight2": ["require(c &gt;= a)", "c = a + b"], "graph": [{"key": "start", "color": "lightblue"}, {"key": "return c", "color": "lightblue"}, {"key": "check(c >= a)", "color": "#F5A9A9"}, {"key": "c = a + b", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "c = a + b"}, {"from": "c = a + b", "to": "check(c >= a)"}, {"from": "check(c >= a)", "to": "return c"}], "percentage": ["5%", "25%"]}, {"blocknumber": "0x4d5c907a460b0844cc99b95003819c2aa2b2b77a", "contract": "SafeMath", "function_name": "div(uint256,uint256)", "clones_num": 1, "composition_count": "0", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result4", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    /* assert(b > 0); // Solidity automatically throws when dividing by 0 */\n    uint256 c = a / b;\n    return c;\n  }\n"], "highlight1": ["assert(b &gt; 0)"], "highlight2": [], "graph": [{"key": "return c", "color": "lightblue"}, {"key": "start", "color": "lightblue"}, {"key": "c = a / b", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "c = a / b"}, {"from": "c = a / b", "to": "return c"}], "percentage": []}, {"blocknumber": "0x5dc4538ce872684d0cfc178a573767d157c7ddf4", "contract": "DSMath", "function_name": "mul(uint256,uint256)", "clones_num": 2, "composition_count": "0", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result5", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x * y) >= x)5%;\n    }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["assert((z = x * y) &gt;= x)"], "graph": [{"key": "start", "color": "lightblue"}, {"key": "check(z = x * y >= x)", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "check(z = x * y >= x)"}], "percentage": ["5%"]}, {"blocknumber": "0x02E24Acc7098E7BedF6e1D863D8034F692ad2E22", "contract": "SafeMath", "function_name": "max(uint256,uint256)", "clones_num": 0, "composition_count": "0", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result6", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "  function max(uint256 x, uint256 y) internal pure returns (uint256) {\n    uint256 z15% = x >= y10% ? x : y;\n    return z15%;\n  }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["x &gt;= y", "END_IF", "z", "z = x", "z = y"], "graph": [{"key": "END_IF", "color": "#F5A9A9"}, {"key": "x >= y", "color": "#F5A9A9"}, {"key": "true", "color": "#F5A9A9"}, {"key": "return z", "color": "#F5A9A9"}, {"key": "false", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "x >= y"}, {"from": "true", "to": "END_IF"}, {"from": "false", "to": "END_IF"}, {"from": "END_IF", "to": "return z"}, {"from": "x >= y", "to": "true", "text": "true"}, {"from": "x >= y", "to": "false", "text": "false"}], "percentage": ["10%", "25%", "15%", "5%", "5%"]}, {"blocknumber": "0x4c75c741f79651C10E97506E02aa1d621755797b", "contract": "SafeMath", "function_name": "add(uint256,uint256)", "clones_num": 2, "composition_count": "6", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result7", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b25%;\n        if (c < a5%) {\n            revert();\n        }\n        return c;\n    }\n"], "highlight1": ["c = a / b", "assert(b &gt; 0)"], "highlight2": ["END_IF", "c &lt; a", "revert()()", "c = a + b"], "graph": [{"key": "return c", "color": "lightblue"}, {"key": "c = a + b", "color": "#F5A9A9"}, {"key": "c < a", "color": "#F5A9A9"}, {"key": "false", "color": "#F5A9A9"}, {"key": "true", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "c = a + b"}, {"from": "c = a + b", "to": "c < a"}, {"from": "true", "to": "false"}, {"from": "false", "to": "return c"}, {"from": "c < a", "to": "true", "text": "true"}, {"from": "c < a", "to": "false", "text": "false"}], "percentage": ["25%", "5%", "10%", "25%"]}, {"blocknumber": "0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1", "contract": "Math", "function_name": "div(uint256,uint256)", "clones_num": 0, "composition_count": "0", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result8", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function div(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        z = y > 05% ? x / y : 0;\n    }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["z = 0", "END_IF", "z = x / y", "y &gt; 0"], "graph": [{"key": "true", "color": "#F5A9A9"}, {"key": "false", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}, {"key": "END_IF", "color": "#F5A9A9"}, {"key": "y > 0", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "y > 0"}, {"from": "true", "to": "END_IF"}, {"from": "false", "to": "END_IF"}, {"from": "y > 0", "to": "true", "text": "true"}, {"from": "y > 0", "to": "false", "text": "false"}], "percentage": ["5%", "25%", "5%", "5%"]}, {"blocknumber": "0x2fa9441B5ee69C024d54845fBbd756241485F492", "contract": "SafeMath", "function_name": "sub(uint256,uint256)", "clones_num": 5, "composition_count": "21", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result9", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a)5%;\n    uint256 c = _a - _b5%;\n    return c;\n  }\n"], "highlight1": ["c = a / b", "assert(b &gt; 0)"], "highlight2": ["c = _a - _b", "require(_b &lt;= _a)"], "graph": [{"key": "return c", "color": "lightblue"}, {"key": "c = a - b", "color": "#F5A9A9"}, {"key": "check(b <= a)", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "check(b <= a)"}, {"from": "check(b <= a)", "to": "c = a - b"}, {"from": "c = a - b", "to": "return c"}], "percentage": ["5%", "5%"]}, {"blocknumber": "0x4d09c5e758ca68be27240f29fb681e5a5341ca98", "contract": "SafeMath", "function_name": "safeSubtract(uint256,uint256)", "clones_num": 21, "composition_count": "21", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result10", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n      assert(x >= y)10%;\n      uint256 z15% = x - y10%;\n      return z15%;\n    }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["z = x - y", "z", "assert(x &gt;= y)"], "graph": [{"key": "assert(x >= y)", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}, {"key": "return z", "color": "#F5A9A9"}, {"key": "z = x - y", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "assert(x >= y)"}, {"from": "assert(x >= y)", "to": "z = x - y"}, {"from": "z = x - y", "to": "return z"}], "percentage": ["10%", "15%", "10%"]}, {"blocknumber": "0x7ca03c6a5af86d037c83d2e19e65841efea69b55", "contract": "SafeMath", "function_name": "mul(uint256,uint256)", "clones_num": 0, "composition_count": "2", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result11", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a * b5%;\n    assert(c >= a)10%;\n    return c; \n  }\n"], "highlight1": ["c = a / b", "assert(b &gt; 0)"], "highlight2": ["assert(c &gt;= a)", "c = a * b"], "graph": [{"key": "check(c >= a)", "color": "#F5A9A9"}, {"key": "c = a * b", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}, {"key": "return c", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "c = a * b"}, {"from": "c = a * b", "to": "check(c >= a)"}, {"from": "check(c >= a)", "to": "return c"}], "percentage": ["10%", "5%"]}, {"blocknumber": "0x0d88ed6e74bbfd96b831231638b66c05571e824f", "contract": "DSMath", "function_name": "add(uint256,uint256)", "clones_num": 9, "composition_count": "30", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result12", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x + y) >= x)5%;\n    }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["assert((z = x + y) &gt;= x)"], "graph": [{"key": "check(z = x + y >= x)", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "check(z = x + y >= x)"}], "percentage": ["5%"]}, {"blocknumber": "0x3b57690f17e1724ecf7c7b691dd66564cd9da0ea", "contract": "SafeMath", "function_name": "add(uint256,uint256)", "clones_num": 329, "composition_count": "1166", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result13", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b25%;\n        require(c >= a, \"add overflow\");\n        return c;\n    }\n"], "highlight1": ["c = a / b", "assert(b &gt; 0)"], "highlight2": ["require(bool,string)(c &gt;= a,add overflow)", "c = a + b"], "graph": [{"key": "return c", "color": "lightblue"}, {"key": "require(bool,string)(c >= a,add overflow)", "color": "#F5A9A9"}, {"key": "c = a + b", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "c = a + b"}, {"from": "c = a + b", "to": "require(bool,string)(c >= a,add overflow)"}, {"from": "require(bool,string)(c >= a,add overflow)", "to": "return c"}], "percentage": ["5%", "25%"]}, {"blocknumber": "0x5d0d6be4295fea5df1abc68fd4db31c189c20321", "contract": "SafeMath", "function_name": "sub(uint256,uint256)", "clones_num": 9, "composition_count": "27", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result14", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        assert(b <= a)5%;\n        return a - b5%;\n    }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["a - b", "assert(b &lt;= a)"], "graph": [{"key": "start", "color": "lightblue"}, {"key": "return a - b", "color": "#F5A9A9"}, {"key": "check(b <= a)", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "check(b <= a)"}, {"from": "check(b <= a)", "to": "return a - b"}], "percentage": ["5%", "5%"]}, {"blocknumber": "0x01e53a2e7122a63845b1c329d4fce8124dda5b06", "contract": "Base", "function_name": "sub(uint256,uint256)", "clones_num": 0, "composition_count": "0", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result15", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function sub(uint256 x, uint256 y) \n    internal \n    returns (uint256) \n    {\n        if(x >= y10%)\n        {\n           uint256 z15% = x - y;\n           return z15%;\n        }\n        else\n        {\n            revert();\n        }\n    }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["z", "z = x - y", "x &gt;= y", "revert()()", "END_IF"], "graph": [{"key": "END_IF", "color": "#F5A9A9"}, {"key": "true", "color": "#F5A9A9"}, {"key": "return z", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}, {"key": "false", "color": "#F5A9A9"}, {"key": "x >= y", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "x >= y"}, {"from": "true", "to": "return z"}, {"from": "false", "to": "END_IF"}, {"from": "x >= y", "to": "true", "text": "true"}, {"from": "x >= y", "to": "false", "text": "false"}], "percentage": ["15%", "10%", "10%", "10%", "25%"]}, {"blocknumber": "0x2d9765a94ff22e0ca3afc3e3f4b116de2b67582a", "contract": "SafeMath", "function_name": "safeSub(uint256,uint256)", "clones_num": 11, "composition_count": "37", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result16", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "  function safeSub (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    assert (x >= y);\n    return x - y10%;\n  }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["x - y", "assert(x &gt;= y)"], "graph": [{"key": "return  value to subtract from -  value to subtract", "color": "#F5A9A9"}, {"key": "check( value to subtract from >=  value to subtract)", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "check( value to subtract from >=  value to subtract)"}, {"from": "check( value to subtract from >=  value to subtract)", "to": "return  value to subtract from -  value to subtract"}], "percentage": ["10%", "10%"]}, {"blocknumber": "0x5A12D5295A8DbB88c76324ca6fd505b1E4e6ad8E", "contract": "SafeMath", "function_name": "safeSub(uint256,uint256)", "clones_num": 0, "composition_count": "4", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result17", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (x < y5%) assert(false)5%;\n        return x - y10%;\n    }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["x - y", "assert(false)", "END_IF", "x &lt; y"], "graph": [{"key": "false", "color": "#F5A9A9"}, {"key": "return x - y", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}, {"key": "x < y", "color": "#F5A9A9"}, {"key": "true", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "x < y"}, {"from": "true", "to": "false"}, {"from": "false", "to": "return x - y"}, {"from": "x < y", "to": "true", "text": "true"}, {"from": "x < y", "to": "false", "text": "false"}], "percentage": ["10%", "5%", "25%", "5%"]}, {"blocknumber": "0x1c623fda1631149e57a8fbffa2510b6274b542a5", "contract": "SafeMathMod", "function_name": "sub(uint256,uint256)", "clones_num": 4, "composition_count": "10", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result18", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a - b) < a)5%;\n    }\n"], "highlight1": ["c = a / b", "c", "assert(b &gt; 0)"], "highlight2": ["require((c = a - b) &lt; a)"], "graph": [{"key": "start", "color": "lightblue"}, {"key": "check(c = a - b < a)", "color": "#F5A9A9"}], "graph_index": [{"from": "start", "to": "check(c = a - b < a)"}], "percentage": ["5%"]}, {"blocknumber": "0x2a5851fa4f8c015f7c563c22fde9c2d862dea954", "contract": "SafeMath", "function_name": "safeAdd(uint256,uint256)", "clones_num": 0, "composition_count": "3", "input_function_type": "Function", "matched_function_type": "Function", "link": "http://127.0.0.1:5000/0result19", "codes": ["  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); \n    uint256 c = a / b;\n    return c;\n  }\n", "  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\n    uint c = a + b25%;\n    assert(c>=a);\n    return c;\n  }\n"], "highlight1": ["c = a / b", "assert(b &gt; 0)"], "highlight2": ["assert(c &gt;= a)", "c = a + b"], "graph": [{"key": "return c", "color": "lightblue"}, {"key": "check(c >= a)", "color": "#F5A9A9"}, {"key": "c = a + b", "color": "#F5A9A9"}, {"key": "start", "color": "lightblue"}], "graph_index": [{"from": "start", "to": "c = a + b"}, {"from": "c = a + b", "to": "check(c >= a)"}, {"from": "check(c >= a)", "to": "return c"}], "percentage": ["10%", "25%"]}]}]}