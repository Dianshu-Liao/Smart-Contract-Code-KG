function1 code,function2 code,function1 FEN,function2 FEN,label1,label2,label
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
    }
",0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function (){
        play_game(0);
    }
","  function () external payable {
    buyTokens(msg.sender);
  }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),4,4,1
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","  function() public {
    revert();
  }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"    function uploadFinish() {
        readOnly = true;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  function Ownable() {
    owner = msg.sender;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),4,4,1
"    function () payable {
        createTokens(msg.sender);
    }
","    function () public {
        revert();
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"  function() public {
    revert();
  }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","  function Ownable() public {
    owner = msg.sender;
  }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),2,2,0
"  function() public {
    revert();
  }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),5,5,1
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function() {
        revert();
    }
","    function () public {
        revert();
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),4,4,1
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"  function() public {
    revert();
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),2,2,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","  function Ownable() public {
    owner = msg.sender;
  }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),5,5,1
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),5,5,1
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","    function Owned() {
        owner = msg.sender;
    }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"  function(){
    revert();
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function uploadFinish() {
        readOnly = true;
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,2,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function () public payable {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,2,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),2,2,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"  modifier canMint() {
    require(!mintingFinished);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"    function() public payable {
	    revert();
	}
","    function () public {
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),1,1,0
"    function () public payable {
        revert();
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),1,1,0
"  function Destructible() public payable { }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"  modifier whenNotPaused() {
    require(!paused);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),3,3,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"  function Destructible() public payable { }
","    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),"0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,2,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () public payable {
        revert();
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function() public payable {
	    revert();
	}
","    function () public payable {
        revert();
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),5,5,1
"    function () external payable {
            getTokens();
     }
","    function() public {
        revert();
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function () public payable {
        revert();
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","  function() public {
    revert();
  }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),"0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",1,1,0
"  function(){
    revert();
  }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function uploadFinish() {
        readOnly = true;
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),2,2,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function owned() {
        owner = msg.sender;
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","    function Owned() {
        owner = msg.sender;
    }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"  function(){
    revert();
  }
","    function() public payable {
	    revert();
	}
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function (){
        play_game(0);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),1,1,0
"  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function () public payable {
        revert();
    }
","    function() {
        revert();
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),5,5,1
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","	function() payable {
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function uploadFinish() {
        readOnly = true;
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function () public payable {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),5,5,1
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"    function() {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),5,5,1
"    function TTC()
        public {
        owner = msg.sender;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","	function() payable {
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function() public {
    revert();
  }
",0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function () external payable {
            getTokens();
     }
","    function () public payable {
        revert();
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"    function (){
        play_game(0);
    }
","    function() public payable {
	    revert();
	}
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),4,4,1
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function owned() {
        owner = msg.sender;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"  function() public {
    revert();
  }
","    function () public {
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  modifier canMint() {
    require(!mintingFinished);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function owned() {
        owner = msg.sender;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","  function() public {
    revert();
  }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function owned() {
        owner = msg.sender;
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"    function() public payable {
	    revert();
	}
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    function () public payable {
        revert();
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"  function() public {
    revert();
  }
","    function () public payable {
        revert();
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),5,5,1
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () external payable {
            getTokens();
     }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),5,5,1
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
","    function () public {
        revert();
    }
",0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"  function Destructible() public payable { }
","    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function () public payable {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),5,5,1
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),2,2,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),2,2,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","    function () public {
    }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function (){
        play_game(0);
    }
","    function () public payable {
        revert();
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),5,5,1
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"  function Ownable() {
    owner = msg.sender;
  }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"  function Destructible() public payable { }
","    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","  function(){
    revert();
  }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,2,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,1,0
"	function() payable {
    }
","    function () public payable {
        revert();
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),5,5,1
"  function Destructible() public payable { }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","    function() public {
        revert();
    }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),5,5,1
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,2,0
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function() public {
        revert();
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),4,4,1
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    function () public payable {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),5,5,1
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),5,5,1
"    function () public payable {
        revert();
    }
","    function () public {
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    function (){
        play_game(0);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","  function Ownable() {
    owner = msg.sender;
  }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","    function Owned() {
        owner = msg.sender;
    }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),5,5,1
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),5,5,1
"    function (){
        play_game(0);
    }
","    function () public {
        revert();
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),1,1,0
"    function () external payable {
            getTokens();
     }
","    function () public {
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function TTC()
        public {
        owner = msg.sender;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function() public {
        revert();
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),"0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function getNow() constant returns (uint result){        
       return now;
    } 
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),1,1,0
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function () public {
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"    function () external payable {
            getTokens();
     }
","    function() {
        revert();
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () public payable {
        revert();
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),5,5,1
"    function (){
        play_game(0);
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"  function Destructible() public payable { }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
        revert();
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function uploadFinish() {
        readOnly = true;
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
        revert();
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),2,2,0
"    function (){
        play_game(0);
    }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function() {
        revert();
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function uploadFinish() {
        readOnly = true;
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    function () public payable {
        revert();
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),5,5,1
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function uploadFinish() {
        readOnly = true;
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function() {
        revert();
    }
","	function() payable {
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function (){
        play_game(0);
    }
","    function () public payable {
        revert();
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () public payable {
        revert();
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),5,5,1
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function() public {
    revert();
  }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","	function() payable {
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    function Owned() {
        owner = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),5,5,1
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function () external payable {
            getTokens();
     }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),2,2,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () public {
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),5,5,1
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function() public {
        revert();
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"  function Destructible() public payable { }
","  function Ownable() {
    owner = msg.sender;
  }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function (){
        play_game(0);
    }
","    function () public payable {
        revert();
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","        function Ownable() {
            owner = msg.sender;
        }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),5,5,1
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function Owned() {
        owner = msg.sender;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,2,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"	function() payable {
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () external payable {
            getTokens();
     }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
","    function () public {
    }
",0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function () public payable {
        revert();
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),5,5,1
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"  function() public {
    revert();
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    function (){
        play_game(0);
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  function() public {
    revert();
  }
","    function () public payable {
        revert();
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),2,2,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier canMint() {
    require(!mintingFinished);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function owned() {
        owner = msg.sender;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function(){
    revert();
  }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","	function() payable {
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"    function () public payable {
        revert();
    }
","    function() public {
        revert();
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"  function Destructible() public payable { }
","    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),1,1,0
"	function() payable {
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),5,5,1
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,2,0
"    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function(){
    revert();
  }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),2,2,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","  function Ownable() {
    owner = msg.sender;
  }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),5,5,1
"  function(){
    revert();
  }
","    function () public {
        revert();
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),5,5,1
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),5,5,1
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function () public payable {
        revert();
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),5,5,1
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",5,5,1
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,1,0
"  function Destructible() public payable { }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,2,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",1,1,0
"    function () {
        throw;     // Prevents accidental sending of ether
    }
","  function() public {
    revert();
  }
",0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function() public {
        revert();
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,2,0
"    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),5,5,1
"  function() public {
    revert();
  }
","	function() payable {
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    function (){
        play_game(0);
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  function Destructible() public payable { }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() public {
        revert();
    }
",0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function (){
        play_game(0);
    }
","    function() {
        revert();
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () public {
        revert();
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function() {
        revert();
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"  function(){
    revert();
  }
","    function () public payable {
        revert();
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"  function Destructible() public payable { }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function () external payable {
            getTokens();
     }
","    function () public payable {
        revert();
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"	function() payable {
    }
","    function() public {
        revert();
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function() {
        revert();
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","	function() payable {
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"  function Ownable() {
    owner = msg.sender;
  }
","    function Owned() {
        owner = msg.sender;
    }
",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),4,4,1
"    function uploadFinish() {
        readOnly = true;
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
","    function() public {
        revert();
    }
",0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","  function() public {
    revert();
  }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),2,2,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),5,5,1
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    function () external payable {
            getTokens();
     }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"  function Destructible() public payable { }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function Owned() {
        owner = msg.sender;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function (){
        play_game(0);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),1,1,0
"    function () public payable {
        revert();
    }
","    function () public {
    }
",0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function owned() {
        owner = msg.sender;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function (){
        play_game(0);
    }
","    function() public {
        revert();
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function() {
        revert();
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),2,2,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () public payable {
        revert();
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () payable {
        createTokens(msg.sender);
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),1,1,0
"	function() payable {
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () public payable {
        revert();
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,2,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),1,1,0
"  function(){
    revert();
  }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),5,5,1
"    function () payable {
        createTokens(msg.sender);
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),4,4,1
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),5,5,1
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),4,4,1
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","  function Ownable() {
    owner = msg.sender;
  }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"  function() public {
    revert();
  }
","    function() public payable {
	    revert();
	}
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),5,5,1
"  function Ownable() public {
    owner = msg.sender;
  }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    function uploadFinish() {
        readOnly = true;
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () public payable {
        revert();
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),5,5,1
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),5,5,1
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,1,0
"    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","  function() public {
    revert();
  }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),1,1,0
"    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),5,5,1
"    function (){
        play_game(0);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function Owned() {
        owner = msg.sender;
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),5,5,1
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),5,5,1
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function owned() {
        owner = msg.sender;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),1,1,0
"	function() payable {
    }
","    function () public payable {
        revert();
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),2,2,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() public {
        revert();
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),5,5,1
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","  function Ownable() public {
    owner = msg.sender;
  }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"  function() public {
    revert();
  }
","  function() public {
    revert();
  }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),5,5,1
"    function() public {
        revert();
    }
","    function () public {
        revert();
    }
",0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),4,4,1
"  function Destructible() public payable { }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function() {
        revert();
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),5,5,1
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"  function(){
    revert();
  }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function uploadFinish() {
        readOnly = true;
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function() public payable {
	    revert();
	}
","	function() payable {
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),2,2,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),2,2,0
"    function owned() {
        owner = msg.sender;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"  function Destructible() public payable { }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","  function Ownable() public {
    owner = msg.sender;
  }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function() public payable {
	    revert();
	}
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"  function Destructible() public payable { }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","        function Ownable() {
            owner = msg.sender;
        }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","    function Owned() {
        owner = msg.sender;
    }
",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"  function Ownable() {
    owner = msg.sender;
  }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function () external payable {
            getTokens();
     }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () public payable {
        revert();
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function() public {
        revert();
    }
",0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () public payable {
        revert();
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"    function () public payable {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),5,5,1
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function () external payable {
    buyTokens(msg.sender);
  }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),1,1,0
"  function Destructible() public payable { }
","    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),1,1,0
"  function() public {
    revert();
  }
","    function() public {
        revert();
    }
",0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),4,4,1
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","  function () external payable {
    buyTokens(msg.sender);
  }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),5,5,1
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"        function Ownable() {
            owner = msg.sender;
        }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),5,5,1
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function () public {
        revert();
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),4,4,1
"  function Ownable() public {
    owner = msg.sender;
  }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function () {
        throw;     // Prevents accidental sending of ether
    }
","    function () public {
    }
",0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () public payable {
        revert();
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function Owned() {
        owner = msg.sender;
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),5,5,1
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),1,1,0
"    function (){
        play_game(0);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"  modifier whenNotPaused() {
    require(!paused);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"	function() payable {
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function() {
        revert();
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"	function() payable {
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"  modifier whenNotPaused() {
    require(!paused);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),1,1,0
"    function() public payable {
	    revert();
	}
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,2,0
"    function () payable {
        createTokens(msg.sender);
    }
","  function() public {
    revert();
  }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function() public payable {
	    revert();
	}
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"    function () external payable {
            getTokens();
     }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),5,5,1
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"    function () {
        throw;     // Prevents accidental sending of ether
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function uploadFinish() {
        readOnly = true;
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () public payable {
        revert();
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function () external payable {
            getTokens();
     }
","  function() public {
    revert();
  }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),5,5,1
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function Destructible() public payable { }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"  function(){
    revert();
  }
","    function() public {
        revert();
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),5,5,1
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function owned() {
        owner = msg.sender;
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),5,5,1
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","  function(){
    revert();
  }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function (){
        play_game(0);
    }
","    function () public payable {
        revert();
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,2,0
"    function (){
        play_game(0);
    }
","    function () external payable {
            getTokens();
     }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"  function() public {
    revert();
  }
","    function() {
        revert();
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),5,5,1
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() public {
        revert();
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function () public payable {
        revert();
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),2,2,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"  function Destructible() public payable { }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"  modifier whenNotPaused() {
    require(!paused);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function() {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),4,4,1
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,2,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,1,0
"    function() public payable {
	    revert();
	}
","  function() public {
    revert();
  }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
","  function() public {
    revert();
  }
",0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"  function Destructible() public payable { }
","	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function() {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"  function Destructible() public payable { }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),5,5,1
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","  function() public {
    revert();
  }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),1,1,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function() public {
        revert();
    }
","    function () public {
    }
",0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () public {
        revert();
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function() public {
        revert();
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,2,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),5,5,1
"    function () public payable {
        revert();
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),5,5,1
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"	function() payable {
    }
","    function () public {
        revert();
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
","    function () public {
    }
",0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function (){
        play_game(0);
    }
","  function(){
    revert();
  }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() {
        revert();
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function () public payable {
        revert();
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function uploadFinish() {
        readOnly = true;
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","  function Ownable() public {
    owner = msg.sender;
  }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function(){
    revert();
  }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),4,4,1
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"  function(){
    revert();
  }
","    function () external payable {
            getTokens();
     }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),2,2,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function owned() {
        owner = msg.sender;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),2,2,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function () public payable {
        revert();
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),1,1,0
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),5,5,1
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function () public payable {
        revert();
    }
","  function() public {
    revert();
  }
",0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),5,5,1
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),5,5,1
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"    function () public payable {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),4,4,1
"    function () external payable {
            getTokens();
     }
","    function () public payable {
        revert();
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"  function() public {
    revert();
  }
","    function() public {
        revert();
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),5,5,1
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function () public payable {
        revert();
    }
","  function() public {
    revert();
  }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),4,4,1
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","	function() payable {
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
        revert();
    }
",0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
        revert();
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","	function() payable {
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"  function(){
    revert();
  }
","	function() payable {
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"  function(){
    revert();
  }
","    function() {
        revert();
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),5,5,1
"  modifier isPause {
   require(paused == true);
   _;
 }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),5,5,1
"    function uploadFinish() {
        readOnly = true;
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",1,1,0
"    function() {
        revert();
    }
","    function () public {
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,1,0
"	function() payable {
    }
","  function() public {
    revert();
  }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,2,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () public payable {
        revert();
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"        function Ownable() {
            owner = msg.sender;
        }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function() public {
    revert();
  }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  function(){
    revert();
  }
","    function () public payable {
        revert();
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,2,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),5,5,1
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () public payable {
        revert();
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() public payable {
	    revert();
	}
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"    function() public payable {
	    revert();
	}
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","  function Ownable() {
    owner = msg.sender;
  }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"    function() {
        revert();
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,2,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () public {
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),"0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),"0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),1,1,0
"    function () public payable {
        revert();
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    function () {
        throw;     // Prevents accidental sending of ether
    }
","    function() public {
        revert();
    }
",0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),5,5,1
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),5,4,1
"  function Ownable() public {
    owner = msg.sender;
  }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function getNow() constant returns (uint result){        
       return now;
    } 
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),1,1,0
"    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () public {
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",5,5,1
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),1,1,0
"    function() public payable {
	    revert();
	}
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function() {
        revert();
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"  function(){
    revert();
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","  function Ownable() {
    owner = msg.sender;
  }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),4,4,1
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),5,5,1
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","  function Ownable() public {
    owner = msg.sender;
  }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function uploadFinish() {
        readOnly = true;
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Ownable() {
    owner = msg.sender;
  }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),5,5,1
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),5,5,1
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () public {
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() public payable {
	    revert();
	}
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),5,5,1
"    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),1,1,0
"  function() public {
    revert();
  }
","    function () public {
        revert();
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),5,5,1
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() public {
        revert();
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function() public {
        revert();
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),5,5,1
"    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function() public payable {
	    revert();
	}
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  function(){
    revert();
  }
","    function () public payable {
        revert();
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"  function(){
    revert();
  }
","    function () public payable {
        revert();
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","  function () external payable {
    buyTokens(msg.sender);
  }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Ownable() {
    owner = msg.sender;
  }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),5,5,1
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","	function() payable {
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","  function Ownable() public {
    owner = msg.sender;
  }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),5,5,1
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () public {
        revert();
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function uploadFinish() {
        readOnly = true;
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","  function() public {
    revert();
  }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function uploadFinish() {
        readOnly = true;
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function () public payable {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),3,3,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"  function() public {
    revert();
  }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",5,5,1
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function() public payable {
	    revert();
	}
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","  function Ownable() public {
    owner = msg.sender;
  }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,2,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"  function() public {
    revert();
  }
","    function (){
        play_game(0);
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),1,1,0
"    function() public payable {
	    revert();
	}
","    function() {
        revert();
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function (){
        play_game(0);
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    function Owned() {
        owner = msg.sender;
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),5,5,1
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,2,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","        function Ownable() {
            owner = msg.sender;
        }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function () public payable {
        revert();
    }
","	function() payable {
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),5,5,1
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"  function Ownable() {
    owner = msg.sender;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),4,4,1
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","	function() payable {
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"  function(){
    revert();
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","  function() public {
    revert();
  }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,2,0
"    function () external payable {
            getTokens();
     }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","        function Ownable() {
            owner = msg.sender;
        }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),5,5,1
"    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  function(){
    revert();
  }
","  function() public {
    revert();
  }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),5,5,1
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"  function(){
    revert();
  }
","    function () public {
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),2,2,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function () {
        throw;     // Prevents accidental sending of ether
    }
","    function () public {
        revert();
    }
",0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public {
        revert();
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),5,5,1
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function getNow() constant returns (uint result){        
       return now;
    } 
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),1,1,0
"    function() public payable {
	    revert();
	}
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function () external payable {
            getTokens();
     }
","	function() payable {
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () external payable {
            getTokens();
     }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"  function() public {
    revert();
  }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function uploadFinish() {
        readOnly = true;
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,1,0
"    function owned() {
        owner = msg.sender;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function() public payable {
	    revert();
	}
","    function() public {
        revert();
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"  function Destructible() public payable { }
","        function Ownable() {
            owner = msg.sender;
        }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),2,2,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),4,4,1
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),5,5,1
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),5,5,1
"  function Destructible() public payable { }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","        function Ownable() {
            owner = msg.sender;
        }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function (){
        play_game(0);
    }
","  function() public {
    revert();
  }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),2,2,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function () public payable {
        revert();
    }
","    function () public {
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","        function Ownable() {
            owner = msg.sender;
        }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","    function () public {
        revert();
    }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function (){
        play_game(0);
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () public payable {
        revert();
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"    function() public payable {
	    revert();
	}
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () public payable {
        revert();
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"    function () public {
    }
","    function () public {
        revert();
    }
",0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  function() public {
    revert();
  }
","  function () external payable {
    buyTokens(msg.sender);
  }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"  function Destructible() public payable { }
","    function Owned() {
        owner = msg.sender;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () public payable {
        revert();
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),5,5,1
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),5,5,1
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","	function() payable {
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"    function() public payable {
	    revert();
	}
","    function () public payable {
        revert();
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),5,5,1
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),5,5,1
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () external payable {
            getTokens();
     }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function uploadFinish() {
        readOnly = true;
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),5,5,1
"    function () external payable {
            getTokens();
     }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),5,5,1
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function owned() {
        owner = msg.sender;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),5,5,1
"  function Ownable() public {
    owner = msg.sender;
  }
","    function Owned() {
        owner = msg.sender;
    }
",0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),4,4,1
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,2,0
"    function () external payable {
            getTokens();
     }
","    function() public payable {
	    revert();
	}
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"  function() public {
    revert();
  }
","    function () public payable {
        revert();
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"  function() public {
    revert();
  }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() public {
        revert();
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  function Ownable() {
    owner = msg.sender;
  }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),1,1,0
"    function (){
        play_game(0);
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),5,5,1
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),4,4,1
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",1,1,0
"    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
","    function () public {
        revert();
    }
",0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),4,4,1
"  function Destructible() public payable { }
","    function owned() {
        owner = msg.sender;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    function () public payable {
        revert();
    }
","    function () public {
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"        function Ownable() {
            owner = msg.sender;
        }
","  function Ownable() {
    owner = msg.sender;
  }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),5,5,1
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () external payable {
            getTokens();
     }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"  function() public {
    revert();
  }
","  function(){
    revert();
  }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),5,5,1
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),4,4,1
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","        function Ownable() {
            owner = msg.sender;
        }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
","    function() public {
        revert();
    }
",0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function uploadFinish() {
        readOnly = true;
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function () public payable {
        revert();
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","  function() public {
    revert();
  }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function owned() {
        owner = msg.sender;
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),5,5,1
"        function Ownable() {
            owner = msg.sender;
        }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  function(){
    revert();
  }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"    function Owned() {
        owner = msg.sender;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","  function(){
    revert();
  }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function () public {
        revert();
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),4,4,1
"    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  function(){
    revert();
  }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function() public {
    revert();
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function () {
        throw;     // Prevents accidental sending of ether
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),1,1,0
"    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function (){
        play_game(0);
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function uploadFinish() {
        readOnly = true;
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"    function () public payable {
        revert();
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function owned() {
        owner = msg.sender;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function uploadFinish() {
        readOnly = true;
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","        function Ownable() {
            owner = msg.sender;
        }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function() public {
    revert();
  }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","  function Ownable() {
    owner = msg.sender;
  }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),5,5,1
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function Owned() {
        owner = msg.sender;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),5,5,1
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function () external payable {
    buyTokens(msg.sender);
  }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),1,1,0
"    function () external payable {
            getTokens();
     }
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"  function Destructible() public payable { }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function getNow() constant returns (uint result){        
       return now;
    } 
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),1,1,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),3,3,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () public payable {
        revert();
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function () public {
        revert();
    }
",0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function() {
        revert();
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function() {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),1,1,0
"    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    function() public payable {
	    revert();
	}
","    function () public {
        revert();
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function() public {
        revert();
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    function () external payable {
            getTokens();
     }
","    function () public {
        revert();
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",1,1,0
"  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x1d86a854da490ff74dedc7abe281fb468f8c19ee/MultiVesting.sol:Ownable:transferOwnership(address),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function() {
        revert();
    }
","    function() public {
        revert();
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),4,4,1
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"  function Destructible() public payable { }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    function () public payable {
        revert();
    }
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"  function() public {
    revert();
  }
","    function () public payable {
        revert();
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),5,5,1
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"  function() public {
    revert();
  }
","    function () public {
        revert();
    }
",0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),5,5,1
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"  modifier whenNotPaused() {
    require(!paused);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function () external payable {
            getTokens();
     }
","    function () public payable {
        revert();
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"  function() public {
    revert();
  }
","    function () public {
    }
",0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),5,5,1
"    function() public payable {
	    revert();
	}
","    function () public payable {
        revert();
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),5,5,1
"    function () public payable {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","  function() public {
    revert();
  }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","    function uploadFinish() {
        readOnly = true;
    }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)","0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () public {
        revert();
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () public {
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    function () public payable {
        revert();
    }
","    function () public {
        revert();
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),5,5,1
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function () public payable {
        revert();
    }
","    function () public {
        revert();
    }
",0x8acfc0d6ddddcddaac8d5c88d281a95278e2bec5/AirDropToken.sol:AirDropToken:fallback(),0x0ee6071bc209c19161f6d17f8597d762b4d30806/CFL.sol:CFL:fallback(),1,1,0
"  modifier whenNotPaused() {
    require(!paused);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"  function() public {
    revert();
  }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"	function() payable {
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () public payable {
        revert();
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),2,2,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),5,5,1
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),2,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () public payable {
        revert();
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () public payable {
        revert();
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"    function () public payable {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),5,5,1
"  function Ownable() public {
    owner = msg.sender;
  }
","    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    function () external payable {
            getTokens();
     }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function() public payable {
	    revert();
	}
","    function() payable {
        require(purchasingAllowed);
        
        // Minimum amount is 0.01 ETH
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        // Hacked mode.
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            // Altruism mode must be at least 0.03 ETH
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x4f60d5605b4ceb8db307024eb5481af8e90ccfc7/Altruism.sol:Altruism:fallback(),1,1,0
"    function() {
        revert();
    }
","    function () public payable {
        revert();
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,1,0
"    function (){
        play_game(0);
    }
","	function() payable {
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",5,5,1
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","  function() public {
    revert();
  }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function getNow() constant returns (uint result){        
       return now;
    } 
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),2,1,0
"    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
",0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),1,1,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",5,5,1
"    function uploadFinish() {
        readOnly = true;
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),2,2,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function uploadFinish() {
        readOnly = true;
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),5,5,1
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"  function Destructible() public payable { }
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,2,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),1,1,0
"    function (){
        play_game(0);
    }
","    function () public {
    }
",0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function () public payable {
        revert();
    }
","    function() public payable {
	    revert();
	}
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),5,5,1
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function uploadFinish() {
        readOnly = true;
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () payable {
        createTokens(msg.sender);
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () external payable {
            getTokens();
     }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),"0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"	function() payable {
    }
","    function () public {
    }
",0x2f0dcccbe7628905bd287e2a28069986e8699717/BNB.sol:BNB:fallback(),0x0acc728ad6eb4908b751bef96b4c308b5e9948b4/Admined.sol:DeveryPresaleWhitelist:fallback(),1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function (){
        play_game(0);
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x5d5cd6acc5ec2485bc52517b144081634aba9b41/game.sol:game:fallback(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"  function Destructible() public payable { }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () external payable {
            getTokens();
     }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,1,0
"  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),5,5,1
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","  function () external payable {
    buyTokens(msg.sender);
  }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),4,4,1
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),1,1,0
"  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier isPause {
   require(paused == true);
   _;
 }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),2,2,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"    function() {
        revert();
    }
","    function ()  payable {
        require(isContract(controller));
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));
    }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x06f0b31fa75d6a4f689fa0f4225f1811ae4a7e7d/TokenSaleAfterSplit.sol:ControlledToken:fallback(),1,1,0
"    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","    function uploadFinish() {
        readOnly = true;
    }
",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","  modifier canTransfer(uint256 _tokenId) {
    require(isApprovedOrOwner(msg.sender, _tokenId));
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x7f737b66921d18b008dc9c3a9b933a3bf559f1bc/InterfaceToken.sol:ERC721BasicToken:canTransfer(uint256),2,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

       
        fundsWallet.transfer(msg.value);                               
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x7cfa0624ce23b1b33f56ccc16f054bb4036ec553/CryptoGO.sol:CryptoGO:fallback(),0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    function KUWAIT() {
        totalSupply = 1000000000;
        symbol = 'KW';
        owner = 0xede7a9430a42eb28394bf78fc8533eeba7dfebb3;
        balances[owner] = totalSupply;
        decimals = 0;
    }
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x0f56feCEA925647587131e91ed258ad3FF0fcF48/KUWAIT.sol:KUWAIT:KUWAIT(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","    function CoinmakeToken() public {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x7b93140e83c74595c8fd1270dbf71a134f2a32c0/CoinmakeToken.sol:CoinmakeToken:CoinmakeToken(),1,1,0
"    function () public payable {
        revert();
    }
","    function() public {
        revert();
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x7B171C08D812F9c642Dcf61f7E080610CbcA64B3/HadeCoin.sol:HadeCoin:fallback(),1,1,0
"    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,2,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() public payable {
	    revert();
	}
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function LIANG(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","0x2fb33180604acaa743396dc609139ed8f77df682/LIANG.sol:LIANG:LIANG(uint256,string,string)",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function TTC()
        public {
        owner = msg.sender;
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),5,5,1
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),2,2,0
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),3,3,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function owned() {
        owner = msg.sender;
    }
","  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),"0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)",1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"  function() public {
    revert();
  }
","    function () external payable {
            getTokens();
     }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x8a9ac2ce73b37d1719989a854f83d456762ea303/ORACON.sol:ORACON:fallback(),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),5,5,1
"    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),4,4,1
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,1,0
"  function () external payable {
    buyTokens(msg.sender);
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x4b958074cee6546e29cdb3c43494e7425b85f59c/CareerChainPrivateSale.sol:Crowdsale:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x0a54468c18bce768876b00cdc82c3164afc74e05/InitialTestMT.sol:InitialTestMT:allowance(address,address)",1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),2,2,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    function () public payable {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","    function Owned() {
        owner = msg.sender;
    }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x8a113a57e74aef531bee8de7e16e604916f053ac/ClipperCoin.sol:Owned:Owned(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function uploadFinish() {
        readOnly = true;
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),1,1,0
"    function () public payable {
        revert();
    }
","  function() public {
    revert();
  }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),5,4,1
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)",1,1,0
"  function Ownable() {
    owner = msg.sender;
  }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","  function Ownable() {
    owner = msg.sender;
  }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x8c78a83de6faa64b100b6055bdf3a1f0b445efd2/EthearnalRepToken.sol:Ownable:Ownable(),2,2,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () public payable {
        revert();
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),5,5,1
"  function Ownable() public {
    owner = msg.sender;
  }
","	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
",0x8bbf5582abdbdde89534cb6c4924c8d4e25a566b/ALT1Token.sol:Ownable:Ownable(),0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function getBalance() view public returns (uint) {
        return this.balance;
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),1,1,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"    function getBalance() view public returns (uint) {
        return this.balance;
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x3ac0d29eaf16eb423e07387274a05a1e16a8472b/LuckyNumber.sol:LuckyNumber:getBalance(),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,1,0
"    function () public payable {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x7a835d90800b6f4c17742cb56711c83c487cde56/AnesthesiaChain.sol:AnesthesiaChain:fallback(),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),2,1,0
"  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),1,1,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),2,2,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    constructor () public {
        initialized      = false;
        norsefirePrice   = 0.1 ether;
        currentNorsefire = 0x1337eaD98EaDcE2E04B1cfBf57E111479854D29A;
    }
","	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
",0x7c0f10bc53c0958e0edccef87a088f52c55843db/CloneFarmFarmer.sol:CloneFarmFarmer:constructor(),0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),1,1,0
"	modifier ownerDoesNotExist(address _owner) {
		require(!isOwner[_owner]);
		_;
	}
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x0a9a88059c8d54af3d466020af987e98d4024219/BrokerInt.sol:MultiOwnable:ownerDoesNotExist(address),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)","0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"  modifier onlyDealers() {
    require(dealership[msg.sender]);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x2b500267335f75d456f1ddd651e638159b516789/EverFountainBountyTicket.sol:Distributable:onlyDealers(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),2,2,0
"    function() {
        revert();
    }
","  function() public {
    revert();
  }
",0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),4,4,1
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"    function Aeron() public {
        totalSupply = datboiSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;    // Give DatBoiCoin Mint the total created tokens
        creator = msg.sender;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3/Aeron.sol:Aeron:Aeron(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function getLockAmount(address _addr) external view returns (uint256) {
        return lockAmounts[_addr];
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x0eb4c120c280d20ed01d897a4a6c1e232029e13d/TokenLockDistribute.sol:TokenLock:getLockAmount(address),1,1,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyManager() {
        require(msg.sender == limitedWalletsManager);
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x6a546617fd8c74555a2cb63b7b064331de82f68d/AbyssToken.sol:TransferLimitedToken:onlyManager(),2,2,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","    function freezeAccount(address target, bool B) private {
        frozenAccount[target] = B;
        FrozenFunds(target, B);
    }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)","0x0B117cd026EeC3af86eBEdA40B6b25eED1662E60/UBlockChain.sol:UBlockChain:freezeAccount(address,bool)",1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x2af989200e9cd8d3404b5b40f5e2f896302d9aa5/EcoCrypto.sol:owned:onlyOwner(),2,1,0
"  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)","0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
","0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)","0x45c58bbd535b8661110ef5296e6987573d0c8276/Etheraffle.sol:usingOraclize:oraclize_query(string,string[3])",1,1,0
"    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"        function Ownable() {
            owner = msg.sender;
        }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
","    function () public payable {
        revert();
    }
",0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),0x6A5cc07F2d61E3480b0CD80d2f9246b35f2109F4/VirtualRealityChain.sol:VirtualRealityChain:fallback(),1,1,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),2,2,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","    function CooinToken() {
        totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
    }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x5a758e5a34e5c9258198b2b6d186a92056ae0b19/CooinToken.sol:CooinToken:CooinToken(),1,1,0
"  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {
    require(_startBlock >= block.number);
    require(_endBlock >= _startBlock);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startBlock = _startBlock;
    endBlock = _endBlock;
    rate = _rate;
    wallet = _wallet;
  }
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","0x5b5750f5a140f4780ef59e33597e073d4a8d3adb/LooqCrowdsale.sol:Crowdsale:Crowdsale(uint256,uint256,uint256,address)","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function () public payable {
        revert();
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x1d47272ff4f1a2b119134e933cf973c40b7d67c0/FutureCoin.sol:FutureCoin:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","0x2e6bdb3fe09f5f252abb5bbd3e46fcbc471936a0/TranslateME.sol:SafeMath:safeDiv(uint256,uint256)",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),1,1,0
"    function Corethum() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }
","    function MyJioCoin() public {
        symbol = ""MYJIO"";
        name = ""MyJioCoin"";
        decimals = 8;
        _totalSupply = 1000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }
",0x3e664e6625222d06dbd27c424d9f6a553eff6d7d/Corethum.sol:Corethum:Corethum(),0x7fab901ef74f95327d36640c02fafeb6d4cb4be7/MyJioCoin.sol:MyJioCoin:MyJioCoin(),1,1,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","  modifier onlyCrowdsaleAgent() {
    require(msg.sender == crowdsaleAgent);
    _;
  }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x7f7b57131f7a70edcb34c409e942e5adb811d9cf/TokenAdrToken.sol:TokenAdrToken:onlyCrowdsaleAgent(),2,2,0
"    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:validAddress(address),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"  function() public {
    revert();
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x1a06ec307215524850152b139976f5a4e6079175/WeberCoin.sol:WeberCoin:fallback(),0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),5,5,1
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() {
        revert();
    }
",0x2fa50319957d5377672d59dd858adcc079bc2247/IOweYou.sol:IOweYou:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","    function transfer(address _to, uint _value) public isStartedOnly returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }
",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),"0x4d0a8d8a6871404d227f74acc7db79c145c06b41/RRToken.sol:ERC20:transfer(address,uint256)",1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),"0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",1,1,0
"    function isContract(address _addr) private view returns (bool) {
        uint length;
        assembly {
        //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(_addr)
        }
        return (length>0);
    }
","    function changeDailyLimit(uint _dailyLimit)
        public
        onlyWallet
    {
        dailyLimit = _dailyLimit;
        DailyLimitChange(_dailyLimit);
    }
",0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371/SafeGuardsPreSale.sol:SafeGuardsToken:isContract(address),0x3fd9aba22521d9ee3202a43bb132816a17973d43/MultiSigWalletWithDailyLimit.sol:MultiSigWalletWithDailyLimit:changeDailyLimit(uint256),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","  function(){
    revert();
  }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x0d6f4cef46f23877a930c2d782cc275c978bc1ee/PlatoToken.sol:PlatoToken:fallback(),1,1,0
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x3b5e99da4df32b933e9887ef58b740a06ad38961/Learn.sol:Learn:transfer(address,uint256)",1,1,0
"    constructor() public {
        balances[msg.sender] = _totalSupply;
        owner = msg.sender;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x1e66f8bf4e95d61cfac0f98d9d6c0ffa23e360e5/MamaToken.sol:MamaToken:constructor(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function() {
        revert();
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x5d8fd1bfdb64b39c7a6ca79a5bb6ed75d730d2d3/KUWAITCOIN.sol:KUWAITCOIN:fallback(),1,1,0
"  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),0x4e3b8c663d1a6620730dd68d65966b867d9e2f80/ListingsERC20.sol:Ownable:Ownable(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,2,0
"    function() public payable {
	    revert();
	}
","    function () {
        throw;     // Prevents accidental sending of ether
    }
",0x7f585b9130c64e9e9f470b618a7badd03d79ca7e/CR7Coin.sol:StandardToken:fallback(),0x0a284444a2787483add9b81fa825030d53916f5a/PhilCoin.sol:PhilCoin:fallback(),1,1,0
"  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x4d69a676983b3873ba04aa5bac89aa1824f09302/PPTL_PrivateCrowdsale.sol:SafeMath:sub(uint256,uint256)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),1,1,0
"    function () payable {
        createTokens(msg.sender);
    }
","    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
",0x3b6fb225e6dcb23452b255ff3101d18328c429d1/Exploreon.sol:Exploreon:fallback(),0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),1,1,0
"    function () payable external {
        // Abort if not in Funding Active state.
        // The checks are split (instead of using or operator) because it is
        // cheaper this way.
        if (!funding) revert();
        
        // Do not allow creating 0 or more than the cap tokens.
        if (msg.value == 0) revert();
        
        var numTokens = msg.value * (1000.0/totalTokens);
        totalTokens += numTokens;

        // Assign new tokens to the sender
        balances[msg.sender] += numTokens;

        // Log token creation event
        Transfer(0, msg.sender, numTokens);
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x2Bf36e414C52a9fd81E21a0aB5742DCE750389D3/BankExToken.sol:BankExToken:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","    modifier onlyOwner(){
        assert(msg.sender == OWNER);
        _;
    }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9/BnsPresale.sol:BnsPresale:onlyOwner(),2,2,0
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyPayloadSize(uint size) {
        require(msg.data.length >= size + 4);
        _;
    }
",0x6c558a4976e751391fb73dd61fa6a72c318d80b5/BitQ.sol:Owned:onlyOwner(),0x7d446f1eb4aaeb2bad37ca372db49a7667ddc2fb/ZIC_Token.sol:ZIC_Token:onlyPayloadSize(uint256),2,2,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x5af90794590e60f6dfeaae768f43b2104f39263d/BasicToken.sol:Ownable:onlyOwner(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),2,1,0
"    function owned() {
        owner = msg.sender;
    }
","	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
",0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949/x32323.sol:owned:owned(),0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),1,1,0
"    function approve(address _spender, uint256 _value) public returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x7d9ba2e091352fc7546107cf4c3e4ef6a63c29d4/IMEIM.sol:ERC20Token:approve(address,uint256)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
"    function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(now < endDate);
        uint amount = msg.value * price;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }
","  function() public {
    revert();
  }
",0x6cd89d29da558f857d99c79ade6f94cbcbe319b8/KYRCrowdsale.sol:KYRCrowdsale:fallback(),0x2f13fa06c0efd2a5c4cf2175a0467084672e648b/MarketPlace.sol:MarketPlace:fallback(),1,1,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C/SmartToken.sol:ERC20Token:approve(address,uint256)",1,1,0
"	function burn(uint256 _value) public returns (bool success) {
	    if (logic.burn(msg.sender, _value) == true) {
	        emit Burn(msg.sender, _value);
	        return true;
	    }
	}
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
",0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a/BitSTDView.sol:BitSTDView:burn(uint256),"0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
",0x0c70a9533baa76344c13ac32a035694a54d0459e/SummerGreen.sol:Ownable:onlyOwner(),0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),5,5,1
"    function InvestFund() 
    public
    payable
    {
        if(msg.value>= 1 ether)
        {
            if(Investors[msg.sender]==0)InvestorsQty++;
            Investors[msg.sender]+=msg.value;
            TotalInvested+=msg.value;
            Available+=msg.value;
            Invest(msg.sender,msg.value);
        }   
    }
","                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
",0x01e53a2e7122a63845b1c329d4fce8124dda5b06/Loan.sol:Loan:InvestFund(),"0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",1,1,0
"    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
","  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {
    uint256 centValue = _valueUSD * 100;
    uint256 tokensAmount = getTokenAmount(centValue);
    centRaised = centRaised.add(centValue);
    token.mint(_to, tokensAmount);
    balancesInCent[_to] = balancesInCent[_to].add(centValue);
  }
","0x2da5f46330def299ddaeacc63be42ea3a3e63476/WBTCToken.sol:StandardToken:allowance(address,address)","0x4dfc56b2613729878aa0a49c928fb41af62ccbef/PreICO.sol:PreICO:manualTransfer(address,uint256)",1,1,0
"    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x1afb62c205d00ddc204a1b0bed31bda417b33a6c/GREENECO.sol:Ownable:onlyOwner(),0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),5,5,1
"    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x0b2f8fbc293c35e900d6a8d7fd926e6ad657010e/LDIT.sol:owned:onlyOwner(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
","    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
",0x5ca9a71b1d01849c0a95490cc00559717fcf0d1d/AEToken.sol:StandardToken:balanceOf(address),"0x1a5d62355fdf317877c45f47da357f1ed64e4d61/LizaGo.sol:StandardToken:allowance(address,address)",1,1,0
"    modifier onlyPayloadSize(uint size) {
      if(msg.data.length < size + 4) {
        revert();
      }
      _;
    }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x04eaf26f259521ea20f151118e556adc7e725c0f/ThreeStarToken.sol:TokenERC20:onlyPayloadSize(uint256),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),1,1,0
"    function getNow() constant returns (uint result){        
       return now;
    } 
","    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
",0x1c3c643f49be262c3040e917e7d2299b9bc081a1/EventInfo.sol:EventInfo:getNow(),"0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","  function Spacoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x1f8b657d1008798842edf8ea80b135ca723295a1/Spacoin.sol:Spacoin:Spacoin(),1,1,0
"  function Ownable() public {
    owner = msg.sender;
  }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
",0x1a7cc52ca652ac5df72a7fa4b131cb9312dd3423/MagnusCoin.sol:Ownable:Ownable(),0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  modifier stopNonOwnersInEmergency {
    if (halted && msg.sender != owner) throw;
    _;
  }
","    modifier nonZeroEth() {
        require(msg.value != 0);
        _;
    }
",0x7f9fa692e1b65d2b6d670feebd3e6bcc29606f14/PaymentForwarder.sol:Haltable:stopNonOwnersInEmergency(),0x5FC677acf6f93A6ff9bAE139bA85aea0A246D24d/HRACrowdfund.sol:HRACrowdfund:nonZeroEth(),1,1,0
"  modifier isPause {
   require(paused == true);
   _;
 }
","  modifier whenNotPaused() {
    require(!paused);
    _;
  }
",0x3ad0aa9d8d8dcc77798febd24336195676216a73/FMToken.sol:StandardToken:isPause(),0x2e68bb08a8594eef7de8b7700c6d3df7a287c136/ModulumTokenICO.sol:Pausable:whenNotPaused(),2,2,0
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","  function DataFundSeedCrowdsale() {

    presaleStartTime = 1512032400;
    presaleUnlimitedStartTime = 1512063000;
    crowdsaleEndedTime = 1512140400;

    minCap = 356 ether;
    maxP1Cap = 534 ether;
    maxCap = 594 ether;
  }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x08B63cBC9589CcDcaf8c801053E6FA9663331250/DataFundSeedCrowdsale.sol:DataFundSeedCrowdsale:DataFundSeedCrowdsale(),1,1,0
"	function CIBNLiveInteractiveToken() public {
		owner = msg.sender;
		totalSupply = 50000000000000000000000000;
		balanceOf[owner]=totalSupply;
		tokenName=""CIBN Live Token"";
		tokenSymbol=""CIBN"";
	}
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x8b801af263b32a118575fc85e44fa05a2e8f6b36/CIBNLiveInteractiveToken.sol:CIBNLiveInteractiveToken:CIBNLiveInteractiveToken(),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"    function CryptoMarketShortCoin(uint256 initialMarketCap) {
        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply
        marketCap = initialMarketCap;
        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)
        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (circulatingSupply)
        allowance[this][owner] = totalSupply;
    }
","    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
",0x4ACE10d39919AEf52dDdDC0a3473451Ee610080d/CryptoMarketShortCoin.sol:CryptoMarketShortCoin:CryptoMarketShortCoin(uint256),0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),1,1,0
"  function Destructible() public payable { }
","    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
",0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603/SMRTCoin.sol:Destructible:Destructible(),0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","    modifier adminExists(address admin) {
        require(isAdmin[admin]);
        _;
    }
",0x6f91f0f9ce8003b203247aa70d78a3c3a0dab630/CooldownDecreaseEffect.sol:Ownable:onlyOwner(),0x4a32b05f949d54146ee5db1a0d1f554f9f67d9c0/PresaleFinalizeAgent.sol:RNTMultiSigWallet:adminExists(address),2,2,0
"  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }
","    modifier onlyWhenTokenSaleAddrNotSet() {
        require(tokenSaleAddr == address(0x0));
        _;
    }
",0x7d3d1185ac96a0e5b5260511a73a9e1695d7eae7/HabibiCrowdsale.sol:MintableToken:hasMintPermission(),0x4dc9268e6b0b0e91a107b8fe93378612feb77285/CloudbricSale.sol:Cloudbric:onlyWhenTokenSaleAddrNotSet(),2,1,0
"    function NINECOINTOKEN() public {
        balances[msg.sender] = totalSupply;
    }
","    function OnlineCasinoCoin() {
        balances[msg.sender] = 100000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)
        totalSupply = 100000000000;                        // Update total supply (1000 for example) (CHANGE THIS)
        name = ""OnlineCasinoCoin"";                                   // Set the name for display purposes (CHANGE THIS)
        decimals = 2;                                               // Amount of decimals for display purposes (CHANGE THIS)
        symbol = ""OCC"";                                             // Set the symbol for display purposes (CHANGE THIS)
        unitsOneEthCanBuy = 10;                                      // Set the price of your token for the ICO (CHANGE THIS)
        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH
    }
",0x6f721567db8894690b12e6d16071261341401023/NINECOINTOKEN.sol:NINECOINTOKEN:NINECOINTOKEN(),0x3e311d04beb665f32cc875f2a35ac9b39c48ffe0/OnlineCasinoCoin.sol:OnlineCasinoCoin:OnlineCasinoCoin(),1,1,0
"    function () public payable {
        revert();
    }
","    function() payable
    requireState(States.Ico)
    {
        require(msg.sender != whitelistControl);
        require(whitelist[msg.sender] == true);
        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;
        require(getTokensAvailableForSale() >= deepTokenIncrease);
        require(block.number < endBlock);
        require(block.number >= startAcceptingFundsBlock);
        etherBalance = etherBalance.add(msg.value);
        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);
        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);
        tokensSold = tokensSold.add(deepTokenIncrease);
        withdrawControl.transfer(msg.value);
        Credited(msg.sender, balances[msg.sender], msg.value);
    }
",0x6a95771d66731e1f59681b9f71f45dc2d248790c/KruhftsToken.sol:KruhftsToken:fallback(),0x3dc865e42ec1c39093ff531fcfc1b4d502f52b4f/DeepToken.sol:DeepToken:fallback(),1,1,0
"    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
","    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
",0x7e30f466373e44d9355b6c123f7e4b1def60475d/BondkickToken.sol:BondkickToken:onlyOwner(),0x2ef06079656f2ab9034b6252978c44104b7b2cc1/OOST.sol:Ownable:onlyOwner(),5,5,1
"  modifier canTransfer() {
    if(!released)
      require(msg.sender == crowdsaleAgent);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x2df8286c9396f52e17DFeE75d2E41E52609CF897/SilentNotaryToken.sol:SilentNotaryToken:canTransfer(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,2,0
"    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
","    function()
        public
        payable
    {
        owner.transfer(this.balance);
        Message(""Thanks for your donation."");
    }
",0x1b76663d00dcdeea0af229e7167c44bda8947a7e/CoinTraker.sol:CoinTraker:fallback(),0x4fee2d21aaca705b70f86db48fe4b166482f7700/JUST.sol:JUST:fallback(),1,1,0
"    function BEXMToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
","    function CappedToken(uint256 _cap) public {
        require(_cap > 0);
        cap = _cap;
    }
","0x5b9e703662e8c4a97d85941c2402653c8285b796/BEXMToken.sol:BEXMToken:BEXMToken(uint256,string,string)",0x4b04633ee658d83a24a91e3a1b244221800d89b4/RiskToken.sol:CappedToken:CappedToken(uint256),1,1,0
"  function buyTokens(address beneficiary) whenNotPaused() payable {
    require(beneficiary != 0x0);
    require(msg.value != 0);
    require(now <= END);

    uint256 weiAmount = msg.value;

    // calculate token amount to be minted
    uint256 tokens = weiAmount.mul(getRate()).div(10);
    
    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    wallet.transfer(msg.value);
  }
","    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
",0x3dfaf3a340168a4552ab1937ea9527aae47c5ea1/StopIcoCoin.sol:StopIcoDonation:buyTokens(address),"0x1fc7afcd4b46c4180b449f16d93968f1b63161ae/BAYToken.sol:SmartToken:issue(address,uint256)",1,1,0
"                function transfer(address to, uint tokens) public returns (bool success) {
                    balances[msg.sender] = safeSub(balances[msg.sender], tokens);
                    balances[to] = safeAdd(balances[to], tokens);
                    emit Transfer(msg.sender, to, tokens);
                    return true;
                }
","    function uploadFinish() {
        readOnly = true;
    }
","0x5fe8a4b8bf89077606aa8bbcb5ee131ae8dbf900/ADZbuzzCommunityToken.sol:ADZbuzzCommunityToken:transfer(address,uint256)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
","  modifier canMint() {
    require(!mintingFinished);
    _;
  }
",0x2f57384ea701c9d84d6ba0b6d00eecb4ae9fb0f5/StupidCrowdsale.sol:Ownable:onlyOwner(),0x5f674dd957ffb49754a1728c8d4811a73b680ed1/VoltraCoin.sol:MintableToken:canMint(),2,1,0
"    function TTC()
        public {
        owner = msg.sender;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x2c80d54416625c3519d5de14528d92f25d03d433/TTC.sol:TTC:TTC(),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),5,5,1
"	function NeoWorldCash() public {
		symbol = ""NASH"";
		name = ""NEOWORLD CASH"";
		decimals = 18;
		totalSupply = 100000000000 * 10**uint(decimals);
		balances[msg.sender] = totalSupply;
		emit Transfer(address(0), msg.sender, totalSupply);
	}
","        function Ownable() {
            owner = msg.sender;
        }
",0x0a255f700b16c0acf5673565c757b94fb38b27f2/NeoWorldCash.sol:NeoWorldCash:NeoWorldCash(),0x4c416637c613d32a092190b6521b6fc3fc5f67fc/WhiteWallToken.sol:Ownable:Ownable(),1,1,0
"  function() public {
    revert();
  }
","    function () {
        //if ether is sent to this address, send it back.
        throw;
    }
",0x2f23228b905ceb4734eb42d9b42805296667c93b/Coinchangex.sol:Coinchangex:fallback(),0x4c21f8b097afebc00ff26fe91e5f836229ed246f/BluToken.sol:BluToken:fallback(),1,1,0
"    function RefundInvestorsBallot(address _tokenContract) {
        tokenContract = EthearnalRepToken(_tokenContract);
        proxyVotingContract = VotingProxy(msg.sender);
        ballotStarted = getTime();
        isVotingActive = true;
    }
","  function Ownable() public {
    owner = msg.sender;
  }
",0x0d2424353d6650cd06b8b845f2f08e0436578d20/EthearnalRepTokenCrowdsale.sol:RefundInvestorsBallot:RefundInvestorsBallot(address),0x2e421ccb62ba0a40d15d88102b8b5188c6b6e700/EYHToken.sol:Ownable:Ownable(),1,1,0
"    modifier realUser(address user){
        if(user == 0x0){
            revert();
        }
        _;
    }
","    modifier onlyRegisteredProvider(){
        if (!providerRegistry[msg.sender]) throw;
        _;
    }
",0x01d28329619796bae733e849696f80a764422700/BaseTokenSale.sol:Token:realUser(address),0x7a7bd6aead42b852fa7949c1e167bad5eff78415/SubscriptionModuleImpl.sol:SubscriptionModuleImpl:onlyRegisteredProvider(),2,2,0
"  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
","    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
",0x4e29ff51029e9fbb5e4ce3f8ae3a6b10e0e7dfdb/REDTTokenSale.sol:Ownable:transferOwnership(address),"0x8c2dc2971a5c899c8925a3cdb33ba0b662c87c06/WINR.sol:WINR:approveAndCall(address,uint256,bytes)",1,1,0
"    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
","    function uploadFinish() {
        readOnly = true;
    }
","0x2a47794f5abd0073fdb499a56321013e027153eb/WubCoin.sol:ERC20CompatibleToken:decreaseApproval(address,uint256)",0x7f6e0d152df1a237450eeffa4f10623ba21a4df0/Storage.sol:Storage:uploadFinish(),1,1,0
"    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
","    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
","0x5AC27b3f04e192435535262eE03582B8f003d1F4/SpeedJump.sol:SafeMath:safeDiv(uint256,uint256)",0x4b174bc0b7581587448e75691d0b101b90d5ee66/ChipotleCdsTok20221205I.sol:ChipotleCdsTok20221205I:balanceOf(address),1,1,0
