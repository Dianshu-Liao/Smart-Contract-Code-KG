{"data": [{"name": "<E>", "category": 0}, {"name": "Deque", "category": 1}, {"name": "Queue", "category": 1}, {"name": "LinkedList", "category": 1}, {"name": "ArrayDeque", "category": 2}, {"name": "Collection.add(E e)", "category": 3}, {"name": "Deque.addLast(E e)", "category": 3}, {"name": "Deque.addFirst(E e)", "category": 3}, {"name": "Deque.offer(E e)", "category": 3}, {"name": "Deque.offerFirst(E e)", "category": 3}, {"name": "Deque.offerLast(E e)", "category": 3}, {"name": "Collection.contains(Object o)", "category": 3}, {"name": "Collection.size()", "category": 3}, {"name": "Iterable.iterator()", "category": 3}, {"name": "Deque.push(E e)", "category": 3}, {"name": "IllegalStateException", "category": 2}, {"name": "Object.equals(Object o)", "category": 3}, {"name": "Map", "category": 1}, {"name": "<K,V>", "category": 0}, {"name": "Map.put(K key, V value)", "category": 3}, {"name": "Map.containsKey(Object key)", "category": 3}, {"name": "Collection", "category": 1}, {"name": "Collection.stream()", "category": 3}, {"name": "Map.values()", "category": 3}, {"name": "Map.remove(Object key)", "category": 3}, {"name": "Map.clear()", "category": 3}, {"name": "Map.replace(K key, V value)", "category": 3}, {"name": "Map.replace(K key, V oldValue, V newValue)", "category": 3}, {"name": "HashMap", "category": 1}, {"name": "TreeMap", "category": 1}, {"name": "Collection.addAll(Collection<? extends E> c)", "category": 3}, {"name": "Set", "category": 1}, {"name": "List", "category": 1}, {"name": "Map.computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)", "category": 3}, {"name": "Map.compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)", "category": 3}, {"name": "Collections", "category": 2}, {"name": "Collections.binarySearch(List<? extends Comparable<? super T>> list, T key)", "category": 3}, {"name": "Collections.sort(List<T> list)", "category": 3}, {"name": "Collections.sort(List<T> list,Comparator<? super T> c)", "category": 3}, {"name": "List.indexOf(Object o)", "category": 3}, {"name": "List.lastIndexOf(Object o)", "category": 3}, {"name": "Java Deque", "category": 4}, {"name": "Deque Implementations", "category": 4}, {"name": "Creating a Deque", "category": 4}, {"name": "Creating a Deque way_1", "category": 4}, {"name": "Creating a Deque way_2", "category": 4}, {"name": "Generic Deque", "category": 4}, {"name": "Generic Deque step_1", "category": 4}, {"name": "Generic Deque step_2", "category": 4}, {"name": "Add Element to Deque", "category": 4}, {"name": "add()", "category": 4}, {"name": "addLast()", "category": 4}, {"name": "addFirst()", "category": 4}, {"name": "offer()", "category": 4}, {"name": "offerLast()", "category": 4}, {"name": "offerFirst()", "category": 4}, {"name": "push()", "category": 4}, {"name": "Check if Deque Contains Element", "category": 4}, {"name": "Deque Size", "category": 4}, {"name": "Iterate Elements of Deque", "category": 4}, {"name": "Iterate Elements via Iterator", "category": 4}, {"name": "Iterate Elements via For-Each Loop", "category": 4}, {"name": "Java Map", "category": 4}, {"name": "Java Map Implementations", "category": 4}, {"name": "Create a Map", "category": 4}, {"name": "Generic Java Map", "category": 4}, {"name": "Generic Java Map step_1", "category": 4}, {"name": "Generic Java Map step_2", "category": 4}, {"name": "Inserting Elements Into a Java Map", "category": 4}, {"name": "Only Objects Can Be Inserted", "category": 4}, {"name": "Subsequent Inserts With Same Key", "category": 4}, {"name": "Null Keys", "category": 4}, {"name": "Null Keys step_1", "category": 4}, {"name": "Null Keys step_2", "category": 4}, {"name": "Checking if Map Contains Key", "category": 4}, {"name": "Iterating the Values of a Java Map", "category": 4}, {"name": "Using a Value Iterator", "category": 4}, {"name": "Using a Value For-Each Loop", "category": 4}, {"name": "Using a Value Stream", "category": 4}, {"name": "Removing Entries From a Java Map", "category": 4}, {"name": "Removing All Entries", "category": 4}, {"name": "Replacing an Entry in a Java Map", "category": 4}, {"name": "Generic Map in Java", "category": 5}, {"name": "The Java for each Loop", "category": 5}, {"name": "Java Collection", "category": 4}, {"name": "Add Collection of Objects to Collection", "category": 4}, {"name": "Java List", "category": 4}, {"name": "Insert All Elements From One List Into Another", "category": 4}, {"name": "Create a List", "category": 4}, {"name": "Java Set", "category": 4}, {"name": "Create a Set", "category": 4}, {"name": "Java Set vs. List", "category": 4}, {"name": "Convert Java Set to List", "category": 4}, {"name": "computeIfAbsent()", "category": 4}, {"name": "Java Lambda Expressions", "category": 5}, {"name": "Java Collections", "category": 4}, {"name": "binarySearch()", "category": 4}, {"name": "Java Sorting Collections", "category": 4}, {"name": "Sorting Objects by their Natural Order", "category": 4}, {"name": "Sorting Objects Using a Comparator", "category": 4}, {"name": "Find Elements in a List", "category": 4}, {"name": "finds the index of the first occurrence in the List", "category": 4}, {"name": "Find Last Occurrence of Element in a List", "category": 4}], "links": [{"source": 85, "target": 87, "value": "Base_uses_align"}, {"source": 88, "target": 90, "value": "Base_object_align"}, {"source": 92, "target": 85, "value": "Base_uses_align"}, {"source": 1, "target": 0, "value": "hasParameters"}, {"source": 2, "target": 0, "value": "hasParameters"}, {"source": 4, "target": 0, "value": "hasParameters"}, {"source": 3, "target": 0, "value": "hasParameters"}, {"source": 1, "target": 2, "value": "extends"}, {"source": 4, "target": 1, "value": "implements"}, {"source": 3, "target": 1, "value": "implements"}, {"source": 1, "target": 5, "value": "HasMethod"}, {"source": 1, "target": 6, "value": "HasMethod"}, {"source": 1, "target": 7, "value": "HasMethod"}, {"source": 1, "target": 8, "value": "HasMethod"}, {"source": 1, "target": 9, "value": "HasMethod"}, {"source": 1, "target": 10, "value": "HasMethod"}, {"source": 1, "target": 11, "value": "HasMethod"}, {"source": 1, "target": 12, "value": "HasMethod"}, {"source": 1, "target": 13, "value": "HasMethod"}, {"source": 1, "target": 14, "value": "HasMethod"}, {"source": 14, "target": 15, "value": "Throws"}, {"source": 17, "target": 18, "value": "hasParameters"}, {"source": 17, "target": 19, "value": "HasMethod"}, {"source": 17, "target": 20, "value": "HasMethod"}, {"source": 17, "target": 23, "value": "HasMethod"}, {"source": 17, "target": 24, "value": "HasMethod"}, {"source": 17, "target": 25, "value": "HasMethod"}, {"source": 17, "target": 26, "value": "HasMethod"}, {"source": 17, "target": 27, "value": "HasMethod"}, {"source": 21, "target": 22, "value": "HasMethod"}, {"source": 23, "target": 21, "value": "Return"}, {"source": 28, "target": 29, "value": "see also"}, {"source": 28, "target": 17, "value": "implements"}, {"source": 21, "target": 30, "value": "HasMethod"}, {"source": 31, "target": 30, "value": "HasMethod"}, {"source": 32, "target": 30, "value": "HasMethod"}, {"source": 31, "target": 32, "value": "see also"}, {"source": 32, "target": 21, "value": "extends"}, {"source": 31, "target": 21, "value": "extends"}, {"source": 21, "target": 11, "value": "HasMethod"}, {"source": 21, "target": 12, "value": "HasMethod"}, {"source": 21, "target": 5, "value": "HasMethod"}, {"source": 2, "target": 21, "value": "extends"}, {"source": 21, "target": 13, "value": "HasMethod"}, {"source": 17, "target": 33, "value": "HasMethod"}, {"source": 17, "target": 34, "value": "HasMethod"}, {"source": 35, "target": 36, "value": "HasMethod"}, {"source": 35, "target": 37, "value": "HasMethod"}, {"source": 35, "target": 38, "value": "HasMethod"}, {"source": 32, "target": 39, "value": "HasMethod"}, {"source": 32, "target": 40, "value": "HasMethod"}, {"source": 5, "target": 8, "value": "function similary"}, {"source": 6, "target": 10, "value": "function similary"}, {"source": 7, "target": 9, "value": "function similary"}, {"source": 11, "target": 16, "value": "Bottom constrain"}, {"source": 28, "target": 29, "value": "efficiency"}, {"source": 31, "target": 32, "value": "Behavior difference"}, {"source": 31, "target": 32, "value": "Type conversion"}, {"source": 33, "target": 34, "value": "Behavior difference"}, {"source": 36, "target": 37, "value": "logic constrain"}, {"source": 39, "target": 40, "value": "function similary"}, {"source": 41, "target": 42, "value": "Hierachical"}, {"source": 41, "target": 43, "value": "Hierachical"}, {"source": 41, "target": 46, "value": "Hierachical"}, {"source": 41, "target": 49, "value": "Hierachical"}, {"source": 41, "target": 57, "value": "Hierachical"}, {"source": 41, "target": 58, "value": "Hierachical"}, {"source": 41, "target": 59, "value": "Hierachical"}, {"source": 43, "target": 44, "value": "Hierachical"}, {"source": 43, "target": 45, "value": "Hierachical"}, {"source": 46, "target": 47, "value": "Hierachical"}, {"source": 46, "target": 48, "value": "Hierachical"}, {"source": 49, "target": 50, "value": "Hierachical"}, {"source": 49, "target": 51, "value": "Hierachical"}, {"source": 49, "target": 52, "value": "Hierachical"}, {"source": 49, "target": 53, "value": "Hierachical"}, {"source": 49, "target": 54, "value": "Hierachical"}, {"source": 49, "target": 55, "value": "Hierachical"}, {"source": 49, "target": 56, "value": "Hierachical"}, {"source": 59, "target": 60, "value": "Hierachical"}, {"source": 59, "target": 61, "value": "Hierachical"}, {"source": 62, "target": 63, "value": "Hierachical"}, {"source": 62, "target": 64, "value": "Hierachical"}, {"source": 62, "target": 65, "value": "Hierachical"}, {"source": 65, "target": 66, "value": "Hierachical"}, {"source": 65, "target": 67, "value": "Hierachical"}, {"source": 62, "target": 68, "value": "Hierachical"}, {"source": 68, "target": 69, "value": "Hierachical"}, {"source": 68, "target": 70, "value": "Hierachical"}, {"source": 62, "target": 71, "value": "Hierachical"}, {"source": 71, "target": 72, "value": "Hierachical"}, {"source": 71, "target": 73, "value": "Hierachical"}, {"source": 62, "target": 74, "value": "Hierachical"}, {"source": 62, "target": 75, "value": "Hierachical"}, {"source": 75, "target": 76, "value": "Hierachical"}, {"source": 75, "target": 77, "value": "Hierachical"}, {"source": 75, "target": 78, "value": "Hierachical"}, {"source": 62, "target": 79, "value": "Hierachical"}, {"source": 62, "target": 80, "value": "Hierachical"}, {"source": 62, "target": 81, "value": "Hierachical"}, {"source": 65, "target": 82, "value": "relate"}, {"source": 83, "target": 61, "value": "relate"}, {"source": 83, "target": 77, "value": "relate"}, {"source": 84, "target": 85, "value": "Hierachical"}, {"source": 86, "target": 87, "value": "Hierachical"}, {"source": 86, "target": 88, "value": "Hierachical"}, {"source": 89, "target": 90, "value": "Hierachical"}, {"source": 89, "target": 91, "value": "Hierachical"}, {"source": 89, "target": 92, "value": "Hierachical"}, {"source": 62, "target": 93, "value": "Hierachical"}, {"source": 93, "target": 94, "value": "relate"}, {"source": 95, "target": 96, "value": "Hierachical"}, {"source": 97, "target": 98, "value": "Hierachical"}, {"source": 97, "target": 99, "value": "Hierachical"}, {"source": 96, "target": 97, "value": "relate"}, {"source": 100, "target": 101, "value": "Hierachical"}, {"source": 100, "target": 102, "value": "Hierachical"}, {"source": 86, "target": 100, "value": "Hierachical"}, {"source": 42, "target": 3, "value": "link"}, {"source": 42, "target": 4, "value": "link"}, {"source": 44, "target": 3, "value": "link"}, {"source": 45, "target": 4, "value": "link"}, {"source": 50, "target": 5, "value": "link"}, {"source": 51, "target": 6, "value": "link"}, {"source": 52, "target": 7, "value": "link"}, {"source": 53, "target": 8, "value": "link"}, {"source": 54, "target": 10, "value": "link"}, {"source": 55, "target": 9, "value": "link"}, {"source": 56, "target": 14, "value": "link"}, {"source": 57, "target": 11, "value": "link"}, {"source": 58, "target": 12, "value": "link"}, {"source": 60, "target": 13, "value": "link"}, {"source": 68, "target": 19, "value": "link"}, {"source": 74, "target": 20, "value": "link"}, {"source": 78, "target": 22, "value": "link"}, {"source": 79, "target": 24, "value": "link"}, {"source": 80, "target": 25, "value": "link"}, {"source": 81, "target": 26, "value": "link"}, {"source": 76, "target": 13, "value": "link"}, {"source": 85, "target": 30, "value": "link"}, {"source": 87, "target": 30, "value": "link"}, {"source": 88, "target": 32, "value": "link"}, {"source": 90, "target": 31, "value": "link"}, {"source": 92, "target": 30, "value": "link"}, {"source": 91, "target": 31, "value": "link"}, {"source": 91, "target": 32, "value": "link"}, {"source": 63, "target": 29, "value": "link"}, {"source": 63, "target": 28, "value": "link"}, {"source": 93, "target": 33, "value": "link"}, {"source": 96, "target": 36, "value": "link"}, {"source": 98, "target": 37, "value": "link"}, {"source": 99, "target": 38, "value": "link"}, {"source": 101, "target": 39, "value": "link"}, {"source": 102, "target": 40, "value": "link"}, {"source": 44, "target": 45, "value": "sibling"}, {"source": 50, "target": 51, "value": "sibling"}, {"source": 51, "target": 52, "value": "sibling"}, {"source": 52, "target": 53, "value": "sibling"}, {"source": 53, "target": 54, "value": "sibling"}, {"source": 54, "target": 55, "value": "sibling"}, {"source": 55, "target": 56, "value": "sibling"}, {"source": 60, "target": 61, "value": "sibling"}, {"source": 76, "target": 77, "value": "sibling"}, {"source": 77, "target": 78, "value": "sibling"}, {"source": 69, "target": 70, "value": "sibling"}, {"source": 101, "target": 102, "value": "sibling"}, {"source": 47, "target": 48, "value": "temporal relation"}, {"source": 66, "target": 67, "value": "temporal relation"}, {"source": 72, "target": 73, "value": "temporal relation"}]}